// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package models

import (
	"context"
	"database/sql"
)

const listCompanies = `-- name: ListCompanies :many
SELECT symbol
FROM company
`

func (q *Queries) ListCompanies(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listCompanies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var symbol string
		if err := rows.Scan(&symbol); err != nil {
			return nil, err
		}
		items = append(items, symbol)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveYahooInsightsRow = `-- name: SaveYahooInsightsRow :exec
INSERT INTO yahoo_insights (
        symbol,
        short_term,
        mid_term,
        long_term,
        estimated_return,
        fair_value
    )
VALUES (?, ?, ?, ?, ?, ?)
`

type SaveYahooInsightsRowParams struct {
	Symbol          string
	ShortTerm       sql.NullString
	MidTerm         sql.NullString
	LongTerm        sql.NullString
	EstimatedReturn sql.NullInt32
	FairValue       sql.NullString
}

func (q *Queries) SaveYahooInsightsRow(ctx context.Context, arg SaveYahooInsightsRowParams) error {
	_, err := q.db.ExecContext(ctx, saveYahooInsightsRow,
		arg.Symbol,
		arg.ShortTerm,
		arg.MidTerm,
		arg.LongTerm,
		arg.EstimatedReturn,
		arg.FairValue,
	)
	return err
}

const saveZacksDailyRow = `-- name: SaveZacksDailyRow :exec
INSERT INTO zacks_daily (
        symbol,
        company,
        price,
        dollar_change,
        percent_change,
        industry_rank,
        zacks_rank,
        value_score,
        growth_score,
        momentum_score,
        vgm_score
    )
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type SaveZacksDailyRowParams struct {
	Symbol        string
	Company       sql.NullString
	Price         float64
	DollarChange  float64
	PercentChange float64
	IndustryRank  sql.NullInt32
	ZacksRank     sql.NullInt32
	ValueScore    sql.NullString
	GrowthScore   sql.NullString
	MomentumScore sql.NullString
	VgmScore      sql.NullString
}

func (q *Queries) SaveZacksDailyRow(ctx context.Context, arg SaveZacksDailyRowParams) error {
	_, err := q.db.ExecContext(ctx, saveZacksDailyRow,
		arg.Symbol,
		arg.Company,
		arg.Price,
		arg.DollarChange,
		arg.PercentChange,
		arg.IndustryRank,
		arg.ZacksRank,
		arg.ValueScore,
		arg.GrowthScore,
		arg.MomentumScore,
		arg.VgmScore,
	)
	return err
}

const saveZacksGrowthRow = `-- name: SaveZacksGrowthRow :exec
INSERT INTO zacks_growth (
        symbol,
        company,
        price,
        growth_score,
        year_over_year_q0_growth,
        long_term_growth_percent,
        last_financial_year_actual,
        next_finanical_year_est,
        this_financial_year_est,
        q1_est,
        earnings_expected_surprise_prediction,
        next_report_date
    )
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type SaveZacksGrowthRowParams struct {
	Symbol                             string
	Company                            sql.NullString
	Price                              float64
	GrowthScore                        sql.NullString
	YearOverYearQ0Growth               float64
	LongTermGrowthPercent              float64
	LastFinancialYearActual            float64
	NextFinanicalYearEst               float64
	ThisFinancialYearEst               float64
	Q1Est                              float64
	EarningsExpectedSurprisePrediction float64
	NextReportDate                     sql.NullTime
}

func (q *Queries) SaveZacksGrowthRow(ctx context.Context, arg SaveZacksGrowthRowParams) error {
	_, err := q.db.ExecContext(ctx, saveZacksGrowthRow,
		arg.Symbol,
		arg.Company,
		arg.Price,
		arg.GrowthScore,
		arg.YearOverYearQ0Growth,
		arg.LongTermGrowthPercent,
		arg.LastFinancialYearActual,
		arg.NextFinanicalYearEst,
		arg.ThisFinancialYearEst,
		arg.Q1Est,
		arg.EarningsExpectedSurprisePrediction,
		arg.NextReportDate,
	)
	return err
}
